#+TITLE: Kicking the tires of AWS CloudFormation

* Objective

- VPC
- elastic IP
- 2 EC2 webservers instances with a load balancer
- Shibboleth SP running on each webserver
- Postgresql RDS instance

* Resources

- Getting Started Guide: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/GettingStarted.Walkthrough.html
- VPC: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/sample-templates-services-us-west-2.html#w2ab2c23c48c13c39
- Single and multi-server web apps (LAMP stacks): https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/sample-templates-appframeworks-us-west-2.html
- CloudFormer - https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-using-cloudformer.html

* AWS CLI

** install

- https://docs.aws.amazon.com/cli/latest/userguide/cli-install-macos.html

#+BEGIN_SRC sh
python3 -m venv py3-env
source py3-env/bin/activate
pip install -U pip
pip install awscli
pip install jsondiff  # will comein handy later
#+END_SRC

** configure

- https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html
- https://docs.aws.amazon.com/cli/latest/userguide/cli-config-files.html

This boils down to creating access keys and providing them in the CLI
execution environment. There's an option to specify an alternative location for the credentials file using =AWS_CONFIG_FILE=, so that's what we're going to do:

#+BEGIN_SRC sh
mkdir -p secrets
cat <<EOF > setenv.sh
export AWS_CONFIG_FILE=secrets/aws_config
export AWS_KEY_NAME=vpc-test.pem
export AWS_KEY_PATH=secrets/\$AWS_KEY_NAME
EOF
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sh
source setenv.sh

cat <<EOF > $AWS_CONFIG_FILE
[default]
region=us-west-2
output=json
aws_access_key_id=
aws_secret_access_key=
EOF

chmod 600 aws_config

touch .gitignore
echo /secrets >> .gitignore
#+END_SRC

#+RESULTS:

Edit the file and add access and secret keys as described here: https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html

Test credentials

#+BEGIN_SRC sh
source setenv.sh
aws sts get-caller-identity
#+END_SRC

* hello bucket

Experiment with a simple template

- https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/gettingstarted.templatebasics.html#gettingstarted.templatebasics.simple
- https://docs.aws.amazon.com/cli/latest/reference/cloudformation/deploy/index.html

#+BEGIN_SRC sh
mkdir -p templates
cat <<EOF > templates/hello-bucket.json
{
    "Resources" : {
        "HelloBucket" : {
            "Type" : "AWS::S3::Bucket"
        }
    }
}
EOF
#+END_SRC

#+RESULTS:

Deploy it

#+BEGIN_SRC sh
aws cloudformation deploy --template-file templates/hello-bucket.json --stack-name hello-bucket
#+END_SRC

Message first time:

: Waiting for changeset to be created..
: Waiting for stack create/update to complete
: Successfully created/updated stack - hello-bucket

Message second time:

: Waiting for changeset to be created..
: No changes to deploy. Stack hello-bucket is up to date

Cool. This shows up in the console as =hello-bucket-hellobucket-10h81fwaaap0g= - how do I identify the just-built resource from the CLI?

Delete it

#+BEGIN_SRC sh
aws cloudformation delete-stack --stack-name hello-bucket
#+END_SRC

It seems to be possible to create, delete, and re-create a stack of
the same name. Strangely enough, even after the stack is deleted, the
command above has a zero exit status.

Wait, there's also =create-stack= - what's the difference?

#+BEGIN_SRC sh
aws cloudformation create-stack --template-body file://templates/hello-bucket.json --stack-name hello-bucket
#+END_SRC

Well, this time there's some more useful output:

: {
:     "StackId": "arn:aws:cloudformation:us-west-2:721970950229:stack/hello-bucket/e61839a0-4f52-11e8-b797-503ac93168c5"
: }

So... it's looking like =create-stack= for creation, =deploy= for updates to the stack.

* sample template: VPC with single EC2 instance

https://us-west-2.console.aws.amazon.com/cloudformation/designer/home?region=us-west-2&templateURL=https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fcloudformation-templates-us-west-2%2FVPC_Single_Instance_In_Subnet.template#

Save this to =templates/vpc-single-ec2-instance.json=

Deploy it

#+BEGIN_SRC sh
aws cloudformation create-stack \
    --template-body file://templates/vpc-single-ec2-instance.json \
    --stack-name vpc-single-ec2-instance-test
#+END_SRC

: An error occurred (ValidationError) when calling the CreateChangeSet operation:
: Parameters: [KeyName] must have values

Ah, it appears that some parameters are required... would be nice to be able to get a listing of these ahead of time...

#+BEGIN_SRC sh
aws cloudformation validate-template --template-body file://templates/vpc-single-ec2-instance.json
#+END_SRC
#+begin_example

{
    "Parameters": [
        {
            "ParameterKey": "KeyName",
            "NoEcho": false,
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance"
        },
        {
            "ParameterKey": "SSHLocation",
            "DefaultValue": "0.0.0.0/0",
            "NoEcho": false,
            "Description": " The IP address range that can be used to SSH to the EC2 instances"
        },
        {
            "ParameterKey": "InstanceType",
            "DefaultValue": "t2.small",
            "NoEcho": false,
            "Description": "WebServer EC2 instance type"
        }
    ],
    "Description": "AWS CloudFormation Sample Template VPC_Single_Instance_In_Subnet: Sample template showing how to create a VPC and add an EC2 instance with an Elastic IP address and a security group. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template."
}
#+end_example

So it looks like only KeyName is required?

Get a list of key pairs

#+BEGIN_SRC sh
aws ec2 describe-key-pairs
#+END_SRC

Can also create a key pair (=$AWS_KEY_NAME=) set in =setenv.sh= above.

#+BEGIN_SRC sh
source setenv.sh
aws ec2 create-key-pair --key-name $AWS_KEY_NAME | jq -r '.["KeyMaterial"]' > secrets/$AWS_KEY_NAME
chmod 600 secrets/$AWS_KEY_NAME
#+END_SRC

Parameters can be provided either on the command line or in a json file: https://aws.amazon.com/blogs/devops/passing-parameters-to-cloudformation-stacks-with-the-aws-cli-and-powershell/

Write a quick python script for serializing parameters as json...

#+BEGIN_SRC sh :results output
cat bin/params.py
#+END_SRC

#+RESULTS:
#+begin_example
#!/usr/bin/env python3

"""Serialize CloudFormation template parmeters to json

"""

import os
import sys
import argparse
import json
from collections import OrderedDict


def main(arguments):

    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument(
        'params', nargs='+',
        help="one or more key value pairs in the format 'key=value'")
    parser.add_argument(
        '-o', '--outfile', default=sys.stdout, type=argparse.FileType('w'),
        help="Output file")

    args = parser.parse_args(arguments)

    params = []
    for pair in args.params:
        k, v = pair.split('=', 1)
        params.append(OrderedDict(ParameterKey=k, ParameterValue=v))

    json.dump(params, args.outfile, indent=4)


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
#+end_example

#+BEGIN_SRC sh :results output
bin/params.py key2=val2 key=val
#+END_SRC

#+RESULTS:
#+begin_example
[
    {
        "ParameterKey": "key2",
        "ParameterValue": "val2"
    },
    {
        "ParameterKey": "key",
        "ParameterValue": "val"
    }
]
#+end_example

Use this to generate params for our template (kinda silly for a single
parameter, but I'm anticipating that there will be more later).

#+BEGIN_SRC sh :results output
source setenv.sh
bin/params.py KeyName=$AWS_KEY_NAME -o templates/vpc-single-ec2-instance-params.json
cat templates/vpc-single-ec2-instance-params.json
#+END_SRC

#+RESULTS:
: [
:     {
:         "ParameterKey": "KeyName",
:         "ParameterValue": "vpc-test.pem"
:     }
: ]

Ok, here goes!

#+BEGIN_SRC sh
aws cloudformation create-stack \
    --template-body file://templates/vpc-single-ec2-instance.json \
    --parameters file://templates/vpc-single-ec2-instance-params.json \
    --stack-name vpc-single-ec2-instance-test
#+END_SRC

: {
:     "StackId": "arn:aws:cloudformation:us-west-2:721970950229:stack/vpc-single-ec2-instance-test/38aeb850-4f2c-11e8-9ecf-503ac9841a35"
: }

This returns immediately... how to monitor progress or completion?

#+BEGIN_SRC sh
aws cloudformation describe-stacks --stack-name vpc-single-ec2-instance-test
#+END_SRC

...this returns some json including a url providing a url that
actually serves up a web page!

Running a second time gives an error

: An error occurred (AlreadyExistsException) when calling the CreateStack operation: Stack [vpc-single-ec2-instance-test] already exists

I want to be able to retrieve various attributes about the
newly-created objects. This seems to be one option:

: aws cloudformation describe-stack-resources --stack-name vpc-single-ec2-instance-test

Let's get the public IP address of the newly created EC2 instance:

#+BEGIN_SRC sh
ec2_id=$(aws cloudformation describe-stack-resources --stack-name vpc-single-ec2-instance-test | jq -r '.StackResources[] | select(.ResourceType == "AWS::EC2::Instance") | .PhysicalResourceId')
public_ip=$(aws ec2 describe-instances --instance-ids $ec2_id | jq -r '.Reservations[] | .Instances[] | .PublicIpAddress')
#+END_SRC

Now that we can get the IP address, let's SSH in... looks like this is
an Amazon Linux instance, and google tells me that the username for
login is =ec2-user=.

: ssh -i $AWS_KEY_PATH ec2-user@$public_ip

If I wanted to get a bit fancier:

#+BEGIN_SRC sh
source setenv.sh
cat <<EOF > ssh-config
Host vpc-test
    HostName $public_ip
    User ec2-user
    IdentityFile $AWS_KEY_PATH
EOF
#+END_SRC

#+RESULTS:

: ssh -F ./ssh-config vpc-test

#+RESULTS:

* Using an Ubintu 16.04 LTS AMI
** identifying the AMI

The strategy used in the template (a nested mapping of architectures
to instance types to amis using two different mapping objects) seem
like too much trouble to reproduce. How about if I just figure out
what ami I want and provide it as a parameter?

Because the various instance types are baffling, start by describing
the instance I am already using:

#+BEGIN_SRC sh
% aws ec2 describe-images --image-ids ami-a9d276c9
{
    "Images": [
        {
            "Architecture": "x86_64",
            "CreationDate": "2016-10-21T09:20:11.000Z",
            "ImageId": "ami-a9d276c9",
            "ImageLocation": "099720109477/ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20161020",
            "ImageType": "machine",
            "Public": true,
            "OwnerId": "099720109477",
            "State": "available",
            "BlockDeviceMappings": [
                {
                    "DeviceName": "/dev/sda1",
                    "Ebs": {
                        "Encrypted": false,
                        "DeleteOnTermination": true,
                        "SnapshotId": "snap-826344d5",
                        "VolumeSize": 8,
                        "VolumeType": "gp2"
                    }
                },
                {
                    "DeviceName": "/dev/sdb",
                    "VirtualName": "ephemeral0"
                },
                {
                    "DeviceName": "/dev/sdc",
                    "VirtualName": "ephemeral1"
                }
            ],
            "Hypervisor": "xen",
            "Name": "ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20161020",
            "RootDeviceName": "/dev/sda1",
            "RootDeviceType": "ebs",
            "SriovNetSupport": "simple",
            "VirtualizationType": "hvm"
        }
    ]
}
#+END_SRC

I want the most recent Ubuntu 16.04 LTS build. This should be possible to find, right? Looks like the filter accepts wildcards:

#+BEGIN_SRC sh
aws ec2 describe-images --filters "Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server*" > xenial-lts.json
#+END_SRC

(Explanation of jq sorting behavior: https://github.com/stedolan/jq/issues/784)

#+BEGIN_SRC sh
cat xenial-lts.json | jq -r '.Images | sort_by(.CreationDate)[] | [.ImageId,.Name] | @tsv' | tail
#+END_SRC

#+RESULTS:
| ami-79873901 | ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20180126                                                     |
| ami-c62eaabe | ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20180205                                                     |
| ami-0ee66876 | ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20180222                                                     |
| ami-78a22900 | ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20180228.1                                                   |
| ami-1c1d9664 | ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20180222-d83d0782-cb94-46d7-8993-f4ce15d1a484-ami-ee4eac93.4 |
| ami-6443d61c | ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20180503.2.2                                                 |
| ami-e441d49c | ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20180305.2                                                   |
| ami-4e79ed36 | ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20180306                                                     |
| ami-ca89eeb2 | ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20180405                                                     |
| ami-51e99c29 | ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20180427                                                     |

Mysteriously, the 20180306 image is the one provided for 16.04 LTS in the EC2 console. Is it possible to identify which one this is from the CLI?

Compare output of =aws ec2 describe-images --image-ids= for each using http://www.jsondiff.com: nope.

So the options are to look up the most recent AMI using the CLI, or use the console to choose the one suggested by Amazon. The latter can be done like this:

#+BEGIN_SRC sh
aws ec2 describe-images --filters "Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server*" | \
jq -r '.Images | sort_by(.CreationDate) | .[-1].ImageId'
#+END_SRC

Now to replace the mapping operation in the template with a parameter...

- define a parameter "AMIId":

: {
:     "ParameterKey": "AMIId",
:     "DefaultValue": "ami-4e79ed36",
:     "NoEcho": false,
:     "Description": "AMI ID for Ubiuntu 16.04"
: },

The reference to the AMI ID is in the Webserver resource, so that
needs to be updated later.

** Update the webserver resource

Found an example, downloaded to =tenplates/=:

- https://github.com/awslabs/aws-cloudformation-templates/blob/master/aws/solutions/HelperNonAmaznAmi/ubuntu16.04LTS_cfn-hup.template

Note that the VPC template identifies the EC2 instance as
"WebServerInstance" but the template above calls it "EC2Instance", and
this attribute is referred to in the body of the instance definition.
Let's hope that it's as simple as replacing one string with the other.

Create params for the new template (will add AMI ID and ssh access policy later)

#+BEGIN_SRC sh :results output
source setenv.sh
bin/params.py KeyName=$AWS_KEY_NAME -o templates/vpc-single-ec2-ubuntu-params.json
cat templates/vpc-single-ec2-ubuntu-params.json
#+END_SRC

#+RESULTS:
: [
:     {
:         "ParameterKey": "KeyName",
:         "ParameterValue": "vpc-test.pem"
:     }
: ]

#+BEGIN_SRC sh
aws cloudformation create-stack \
    --template-body file://templates/vpc-single-ec2-ubuntu.json \
    --parameters file://templates/vpc-single-ec2-ubuntu-params.json \
    --stack-name vpc-single-ec2-ubuntu
#+END_SRC

#+BEGIN_SRC sh
aws cloudformation describe-stacks --stack-name vpc-single-ec2-ubuntu
#+END_SRC

The above returns a stack ID, but checking status shows
CREATE_IN_PROGRESS, then ROLLBACK_IN_PROGRESS, then
ROLLBACK_COMPLETE - so some error, but without any diagnostic
messages in the terminal.

In the stacks console, see some messages that seem related to the error

: The following resource(s) failed to create:
: [OutBoundHTTPNetworkAclEntry, Subnet, AttachGateway,
: OutBoundResponsePortsNetworkAclEntry, WebServerInstance,
: InboundSSHNetworkAclEntry, InboundResponsePortsNetworkAclEntry,
: OutBoundHTTPSNetworkAclEntry, InboundHTTPNetworkAclEntry]. . Rollback
: requested by user.

and associated with WebServerInstance:

: The security group 'sg-2fb58a51' does not exist

So, some problem related to the creation of the security group?

As far as I can tell, the security group definition (and the reference
to it) is no different here than it is in the working test template
above.

Got some help on the template...

: It looks like there are a couple of things missing (please see attached diff):
:
: - A subnet was not being referenced in the EC2 instance, so it was
:   launching in the default VPC (security group only existed in the new
:   VPC)
: - Security Group reference needed to be the ID
: - The instance needed a public IP address (I added it on the subnet
:   level, but it could be done individually)

#+BEGIN_SRC sh
ec2_id=$(aws cloudformation describe-stack-resources --stack-name vpc-single-ec2-ubuntu | jq -r '.StackResources[] | select(.ResourceType == "AWS::EC2::Instance") | .PhysicalResourceId')
public_ip=$(aws ec2 describe-instances --instance-ids $ec2_id | jq -r '.Reservations[] | .Instances[] | .PublicIpAddress')
#+END_SRC

#+BEGIN_SRC sh
ssh -i $AWS_KEY_PATH ubuntu@$public_ip
#+END_SRC

* Add an RDS instance in a private subnet
** resources
- https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-rds-database-instance.html
- https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html
- https://stackoverflow.com/questions/37038489/how-to-add-a-rds-instance-to-a-vpc-using-aws-cloudformation
- http://www.stojanveselinovski.com/blog/2016/01/12/simple-postgresql-rds-cloudformation-template/
- https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.Scenarios.html#USER_VPC.Scenario1
- https://serverfault.com/questions/739179/aws-vpc-public-private-subnets-ec2-instance-cannot-reach-rds-instance
- https://github.com/stelligent/cloudformation_templates#database
- https://gist.github.com/smagch/62bcb7cc78cc0d03492a

** manually-created instance

Let's describe some of the resources used by the prototype
applications that were manually created from the console.

*** Subnets

#+BEGIN_SRC sh
aws ec2 describe-subnets --filters='Name=tag-value,Values=oltg*'
{
    "Subnets": [
        {
            "AvailabilityZone": "us-west-2b",
            "AvailableIpAddressCount": 251,
            "CidrBlock": "10.0.2.0/24",
            "DefaultForAz": false,
            "MapPublicIpOnLaunch": false,
            "State": "available",
            "SubnetId": "subnet-0c92857a",
            "VpcId": "vpc-48aa772f",
            "AssignIpv6AddressOnCreation": false,
            "Ipv6CidrBlockAssociationSet": [],
            "Tags": [
                {
                    "Key": "Name",
                    "Value": "oltg_private2"
                }
            ]
        },
        {
            "AvailabilityZone": "us-west-2a",
            "AvailableIpAddressCount": 250,
            "CidrBlock": "10.0.1.0/24",
            "DefaultForAz": false,
            "MapPublicIpOnLaunch": false,
            "State": "available",
            "SubnetId": "subnet-1fb24e78",
            "VpcId": "vpc-48aa772f",
            "AssignIpv6AddressOnCreation": false,
            "Ipv6CidrBlockAssociationSet": [],
            "Tags": [
                {
                    "Key": "Name",
                    "Value": "oltg_private1"
                }
            ]
        },
        {
            "AvailabilityZone": "us-west-2a",
            "AvailableIpAddressCount": 249,
            "CidrBlock": "10.0.0.0/24",
            "DefaultForAz": false,
            "MapPublicIpOnLaunch": false,
            "State": "available",
            "SubnetId": "subnet-1db24e7a",
            "VpcId": "vpc-48aa772f",
            "AssignIpv6AddressOnCreation": false,
            "Ipv6CidrBlockAssociationSet": [],
            "Tags": [
                {
                    "Key": "Name",
                    "Value": "oltg_public"
                }
            ]
        }
    ]
}
#+END_SRC

#+BEGIN_SRC sh
(py3-env) cloudformation % aws --output text ec2 describe-subnets --filters='Name=tag-value,Values=oltg*'
SUBNETS	False	us-west-2b	251	10.0.2.0/24	False	False	available	subnet-0c92857a	vpc-48aa772f
TAGS	Name	oltg_private2
SUBNETS	False	us-west-2a	250	10.0.1.0/24	False	False	available	subnet-1fb24e78	vpc-48aa772f
TAGS	Name	oltg_private1
SUBNETS	False	us-west-2a	249	10.0.0.0/24	False	False	available	subnet-1db24e7a	vpc-48aa772f
TAGS	Name	oltg_public
#+END_SRC

*** security groups

#+BEGIN_SRC sh
(py3-env) cloudformation % aws --output text ec2 describe-security-groups --filters='Name=tag-value,Values=oltg*'
SECURITYGROUPS	Security Group for OLTG webserver and DB	sg-b8e7ecc1	oltg_vpc_sg	721970950229	vpc-48aa772f
IPPERMISSIONS	80	tcp	80
IPRANGES	0.0.0.0/0
IPPERMISSIONS	22	tcp	22
IPRANGES	173.250.164.44/32
IPRANGES	128.95.186.130/32
IPRANGES	128.95.186.43/32
IPPERMISSIONS	443	tcp	443
IPRANGES	0.0.0.0/0
IPV6RANGES	::/0
IPPERMISSIONSEGRESS	-1
IPRANGES	0.0.0.0/0
TAGS	Name	oltg_vpc_sg
SECURITYGROUPS	OLTG DB Instance Security Group	sg-c37278ba	oltg_db_sg	721970950229	vpc-48aa772f
IPPERMISSIONS	5432	tcp	5432
USERIDGROUPPAIRS	sg-b8e7ecc1	721970950229
IPPERMISSIONSEGRESS	-1
IPRANGES	0.0.0.0/0
TAGS	Name	oltg_db_sg
#+END_SRC

** creation and introspection

#+BEGIN_SRC sh
aws cloudformation create-stack \
    --template-body file://templates/vpc-ec2-rds.json \
    --parameters file://templates/vpc-ec2-rds-params.json \
    --stack-name vpc-ec2-rds
#+END_SRC

Property DBSubnetGroupDescription cannot be empty.

DB Subnet Group doesn't meet availability zone coverage requirement. Please add subnets to cover at least 2 availability zones. Current coverage: 1

#+BEGIN_SRC sh
aws cloudformation describe-stacks --stack-name vpc-ec2-rds
#+END_SRC

#+BEGIN_SRC sh
aws cloudformation deploy --template-file templates/vpc-ec2-rds.json --stack-name vpc-ec2-rds
#+END_SRC

"DatabaseInstance" : {
  "Type" : "AWS::RDS::DBInstance",
  "Properties" : {
    "DBName" : { "Ref" : "DBName" },
    "AllocatedStorage" : { "Ref" : "DBAllocatedStorage" },
    "DBInstanceClass" : { "Ref" : "DBClass" },
    "Engine" : "postgres",
    "EngineVersion" : "9.6",
    "MasterUsername" : { "Ref" : "DBUsername" } ,
    "MasterUserPassword" : { "Ref" : "DBPassword" },
    "DBSubnetGroupName" : { "Ref" : "DBSubnetGroup" },
    "DBSecurityGroups" : [ { "Ref" : "DBEC2SecurityGroup" } ]
  }
}


** RDS questions

- what's the best way to go about adding an RDS instance in the VPC
  accessible from the EC2 instance? CloudFormer?
- how should parameters containing secrets (like RDS
  MasterUserPassword) be passed to the template?
- should I define RDS security groups or VPC security groups?
- how do I create a snapshot with the CLI?

* questions

Assuming that I'd like to get a basic webserver + database in a VPC up
and running before tackling adding a load balancer...

- should I set up EC2 instances as reserved instance? How?
- how do I add a common tag to all resources to track billing?
- [X] confirm appropriate use of =create-stack= vs =deploy=
- [X] how do I generate a template with a different set of AMI mapping so that
  I'm using ubuntu 16.04?
- how do associate an existing elastic IP, and prevent this IP from
  being deleted along with the stack when the stack is terminated?
